#!/usr/bin/env python
import os
import pandas as pd

exec(open("python.py").read())
module('load', 'apps/synopsys/hspice/F-2011.09-SP2')

from classes.ptm import ptm
from classes.subckts import subckts

def main():
    # For the given path, get the full path list of transistors models
    dir_name = os.getcwd() + '/modelfiles/'

    temp = ptm("test", "nfet.pm", "pfet.pm")

    models_subdirs = temp.set_fet_names(dir_name)
    models_list = temp.get_models_libs()
    subdir_paths = temp.set_uut_dir(dir_name) # create uut directories and sbudirs

    nfin = "1000m"

    timing_data = []

    for model_subdir in models_subdirs:
        parts = model_subdir.split("/")
        parts.reverse()
        parts = "".join(parts)
        subuut = [subuut_name for subuut_name in models_list if parts in subuut_name] 
        with open(os.getcwd() + "/" + temp.uut + "/" + subuut[0] + ".sp", 'w+') as uut:
            (fet_size, fet_voltage) = temp.get_fet_params(model_subdir)
            val_50 = str(float(fet_voltage) / 2)

            subckts_modules = subckts(uut, fet_size, nfin, fet_voltage)

            uut.write("$This UUT was automatically generated by:\n")
            uut.write("$" + os.getcwd() + "/" + __file__ + "\n\n")

            uut.write("$Netlist of " + temp.uut + "\n")
            uut.write(".lib '../models' " + subuut[0] + "\n\n")

            # input load need to have different input, different ouputs, and different instance name. Tag format: xy. x is the amount of loads and y the instance
            instance = 0
            load_amount = 4
            cycle_time = 2
            subckts_modules.write_source(instance, cycle_time)
            subckts_modules.write_inverter(instance)
            subckts_modules.write_outputs(instance, load_amount)

            uut.write("$Power Sources\n")
            uut.write("vdd vdd  gnd " + fet_voltage + "V\n")
            
            uut.write(".option post=2\n\n")
            
            uut.write("$Analysis\n")
            sim_time = "8"
            uut.write(".tran 10ps " + sim_time + "ns\n\n")

            uut.write(".print TRAN V(in_0) V(out_0)\n")
            uut.write(".measure tran power_avg avg power\n")
            uut.write(".measure tran avg_power avg p(vdd) from=0ns to=4ns\n")
            uut.write(".measure tran inv_avg_power avg p(xinverter0" + ") from=0ns to=4ns\n")
            uut.write(".measure tran peakpower max p(xinverter0" + ")\n")
            uut.write(".measure tran trf_delay_1 trig v(in_0) val=" + val_50 + " rise=1 targ v(out_0) val=" + val_50 + " fall=1\n\n")
            uut.write(".measure tran tfr_delay_1 trig v(in_0) val=" + val_50 + " fall=1 targ v(out_0) val=" + val_50 + " rise=1\n\n")
            uut.write(".measure tran trf_delay_2 trig v(in_0) val=" + val_50 + " rise=2 targ v(out_0) val=" + val_50 + " fall=2\n\n")
            uut.write(".measure tran tfr_delay_2 trig v(in_0) val=" + val_50 + " fall=2 targ v(out_0) val=" + val_50 + " rise=2\n\n")

            uut.write(".end")

        uut_script_dir = os.getcwd()
        os.chdir(temp.uut)
        os.system('hspice ' + subuut[0] + ".sp > " + subuut[0] + ".lis")
        os.chdir(uut_script_dir)

        timing_series = [] 
        with open(os.getcwd() + "/" + temp.uut + "/" + subuut[0] + ".lis") as results:
            reading_flag = 0
            for line in results:
                if ("x\n" in line): 
                    reading_flag = 1
                elif ("y\n" in line) and (reading_flag == 1):
                    reading_flag = 0
                elif (reading_flag == 1):
                    timing_series.append(line.split())
        timing_data.append(timing_series)


#    print(timing_data[0][1])
#    print(timing_data[0][2][1])

    data = pd.DataFrame(timing_data[0][3:], columns = ['Time', 'Voltage_in', 'Voltage_out'])
    data_no_indices = data.to_string(index=False)
#    print(data_no_indices)

if __name__ == '__main__':
    main()

