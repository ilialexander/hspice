#!/usr/bin/env python

import os

class ptm:

    def __init__(self, uut, nmodel, pmodel, nfin):
        self.uut = uut       # unit under test
        self.nmodel = nmodel # n channel model name
        self.pmodel = pmodel # p channel model name
        self.nfin = nfin     # nfin amount, size?


    def get_models_subdirs(self, directory):
        files_list = os.listdir(directory) # contains all files in directory
        models_full_paths = list() # will hold the list of full paths
        for ea_file in files_list: # iterates over all the entries
            full_path = os.path.join(directory, ea_file) # creates full path
            if os.path.isdir(full_path): # if subdirectory get children files
                models_full_paths += self.get_models_subdirs(full_path) # recursive get_models for subdirectory's files
            else:
                models_full_paths.append(full_path) # add full_paht to list

        return models_full_paths


    def get_models_libs(self):
        '''Gathers the list of models files'''
        models_list = [] # list of model files
        with open('models') as models: # models files contains all the model libraries
            for line in models:
                if ".LIB" in line: # lines which contain model names
                    models_list.append(line.replace(".LIB ", "").replace("\n", ""))

        self.models_list = models_list


    def get_fet_params(self, model_uut):
        '''Gets the FETs parameters'''
        fet_size = model_uut.split("/")[1] # get size from model name
        pmodel_subpath = model_uut + self.pmodel
        # search for pmodel path to read file
        pmodel_path = [path for path in self.models_paths if pmodel_subpath in path]
        with open(pmodel_path[0]) as pmodel:
            for line in pmodel:
                if "VDD" in line: # read line with nominal voltage
                    fet_voltage = line.split("VDD=")[1].replace("V","").replace("\n","")

        return (fet_size, fet_voltage)           


    def get_subuut(self, model_subdir):
        self.get_models_libs() # gets the ptm models libraries
        parts = model_subdir.split("/")
        parts.reverse()
        parts = "".join(parts)
        # gets file names
        subuut = [subuut_name for subuut_name in self.models_list if parts in subuut_name]
        # get fet parameters from model files
        (fet_length, fet_voltage) = self.get_fet_params(model_subdir) 

        return (subuut[0], fet_length, fet_voltage, self.nfin)


    def set_fet_names(self, directory):
        '''Set the names for the subckt files'''
        self.set_dir() # creates directory for uut
        self.models_paths = self.get_models_subdirs(directory) # get all fet models        
        # retrieves file names from self.models_paths
        models_files  = [files.replace(directory, '').replace(self.nmodel, '') for files in self.models_paths]
        # cleans extra models under pmodels names
        uut_params = [] # collect all parameters for each ptm model
        for model in models_files:
            if self.pmodel not in model:
                uut_params.append(self.get_subuut(model))

        return uut_params


    def set_dir(self):
        '''Creates directories for the Unit Under Test (uut)'''
        try:
            os.system("rm -r " + self.uut) # rmoves the uut directory
            os.mkdir(self.uut) # creates the directory
        except OSError:
            # if directory exist then prints 'warning' message
            os.mkdir(self.uut) # creates the directory
            print ("Subdirectory %s already exists. Try deleting it with 'rm -r uut_name' and starting fresh." % self.uut)
        else:
            print ("Successfully created the directory %s " % self.uut)

        return None #local_paths


    def set_fet_subckts(self, local_paths):
        '''Creates the subckt files for the fet models'''
        writing = 0 # flag to start and stop writing
        for path, model_subckt_name in zip(local_paths[1:],self.models_subdir): # iterates through subckt names and paths
            # Creates a new file 
            temp_model = model_subckt_name.split("_")
            temp_model.reverse()
            model_search = ''.join(temp_model)
            
            with open(path + "/" + model_subckt_name, 'w+') as subckt: # open file to write
                subckt.write("$This subckt was automatically generated by:\n") # disclaimere to find script in the future
                subckt.write("$" + __file__ + "\n") # whrite location of script for easy search

        return None


