#!/usr/bin/env python

import os

class Ptm:

    def __init__(self, uut, nmodel, pmodel):
        self.uut = uut
        self.nmodel = nmodel
        self.pmodel = pmodel

    def get_models(self, directory):
        #create a list of file and sub directories
        
        # directory = directory 
        # names in the given directory 
        files_list = os.listdir(directory)
        files_paths = list()
        # Iterate over all the entries
        for ea_file in files_list:
            # Create full path
            full_path = os.path.join(directory, ea_file)
            # If ea_file is a directory then get the list of files in this directory 
            if os.path.isdir(full_path):
                files_paths = files_paths + self.get_models(full_path)
            else:
                files_paths.append(full_path)

        return files_paths


    def set_uut_dir(self, models_files_dir):
        uut_names = [self.uut + '_' + item for item in models_files_dir]
        dir_paths = [self.uut + '/' + item for item in uut_names]
        dir_paths.insert(0,self.uut)

        for names in dir_paths:
            try:
                os.mkdir(names)
            except OSError:
                print ("Subdirectory %s already exists. Try deleting it with 'rm -r uut_name' and starting fresh." % names)
            else:
                print ("Successfully created the directory %s " % names)

        return dir_paths


    def set_fet_names(self, directory, files_paths):
        models_files  = [files.replace(directory, '').replace(self.nmodel, '').replace('/', '_') for files in files_paths]
        models_files_dir = [model for model in models_files if self.pmodel not in model]

        cir_files = list()
        for cir_file_r in models_files_dir:
            cir_file = "".join(reversed(cir_file_r.split("_")))
            cir_files.append(cir_file)

        return cir_files


    def set_fet_subckts(self, cir_files, dir_paths):
        writing = 0
        for item, cir_file in zip(dir_paths[1:],cir_files):
            # Creates a new file 
            with open(item + "/" + cir_file, 'w+') as subckt:
                subckt.write("$This subckt was automatically generated by:\n")
                subckt.write("$" + os.getcwd() + "/" + __file__ + "\n")
                with open('models') as models:
                    for line in models:
                        if ("Example" not in line) & (cir_file in line) & (writing == 0):
                            writing = 1
                            subckt.write(line)
                        elif (cir_file in line) & (writing == 1):
                            subckt.write(line)
                            writing = 0
                        elif (writing == 1):
                            subckt.write(line)
                        else:
                            pass

        return None 
